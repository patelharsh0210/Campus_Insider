generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  fullname   String
  password   String
  createdAt  DateTime  @default(now())
  username   String    @unique
  email      String    @unique
  gender     Gender
  profileUrl String?
  authType   String?   @default("local")
  comments   Comment[]
  likes      Like[]
  posts      Post[]
  reviews    Review[]
  reels      Reel[]

  @@map("users")
}

model College {
  id          String   @id @default(uuid())
  name        String
  location    String
  type        String
  affiliation String?
  category    String
  reviews     Review[]
}

model Review {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  imageUrl  String?
  userId    String
  collegeId String
  isDeleted Boolean  @default(false)
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Post {
  id             String    @id @default(uuid())
  title          String
  content        String
  createdAt      DateTime  @default(now())
  userId         String
  media          String?
  isDeleted      Boolean   @default(false)
  numbersOfLikes Int       @default(0)
  comments       Comment[]
  likes          Like[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reelId    String?
  reel      Reel?    @relation(fields: [reelId], references: [id], onDelete: Cascade)


  @@map("comments")
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  reelId String?
  reel Reel? @relation(fields: [reelId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Reel {
  id            String    @id @default(uuid())
  caption  String?
  videoUrl      String
  publicId      String
  createdAt     DateTime  @default(now())
  userId        String
  isDeleted     Boolean   @default(false)
  numbersOfLikes Int      @default(0)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[] // If you want comments on reels
  likes         Like[]    // If you want likes on reels
}

model Admin {
  id       String @id @default(uuid())
  username String
  secret   String
}

enum Gender {
  male
  female
  other
}
