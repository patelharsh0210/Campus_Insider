generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Change to "mysql" or "sqlite" if needed
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  fullname  String
  password  String
  createdAt DateTime  @default(now())
  username  String    @unique
  email     String    @unique
  gender    Gender
  reviews   Review[] 
  posts     Post[]
  comments  Comment[]
  likes     Like[]

  @@map("users")
}

model College {
  id          String   @id @default(uuid())
  name        String
  location    String
  type        String
  affiliation String? // Nullable for non-private colleges
  category    String // "degree_gtu", "degree_private", "diploma_gtu", "diploma_private"
  reviews     Review[]
}

enum Gender {
  male
  female
  other
}

model Review {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  imageUrl  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collegeId String
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Post {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  like      Like[]
  comment   Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("likes")
}
